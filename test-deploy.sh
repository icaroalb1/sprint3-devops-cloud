#!/bin/bash

# =====================================================
# Script de Teste Completo - Sprint 3 DevOps
# =====================================================

echo "üß™ INICIANDO TESTES COMPLETOS DO PROJETO DEVOPS"
echo "================================================"

# Teste 1: Verificar estrutura de arquivos
echo "üìÅ Teste 1: Verificando estrutura de arquivos..."
required_files=(
    "README.md"
    "script_bd.sql"
    "azure-cli/01-create-resource-group.sh"
    "azure-cli/02-create-database.sh"
    "azure-cli/03-create-appservice.sh"
    "azure-cli/04-configure-connection.sh"
    "azure-cli/05-deploy-app.sh"
    "tests/post-moto.json"
    "tests/put-moto.json"
    "tests/delete-moto.json"
    "docs/arquitetura.md"
)

missing_files=0
for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file - FALTANDO!"
        ((missing_files++))
    fi
done

if [ $missing_files -eq 0 ]; then
    echo "  ‚úÖ Todos os arquivos necess√°rios est√£o presentes!"
else
    echo "  ‚ùå $missing_files arquivo(s) faltando!"
fi

# Teste 2: Verificar permiss√µes dos scripts
echo ""
echo "üîê Teste 2: Verificando permiss√µes dos scripts..."
for script in azure-cli/*.sh; do
    if [ -x "$script" ]; then
        echo "  ‚úÖ $script (execut√°vel)"
    else
        echo "  ‚ùå $script (n√£o execut√°vel)"
    fi
done

# Teste 3: Verificar sintaxe dos scripts
echo ""
echo "üîç Teste 3: Verificando sintaxe dos scripts..."
syntax_errors=0
for script in azure-cli/*.sh; do
    if bash -n "$script" 2>/dev/null; then
        echo "  ‚úÖ $script (sintaxe OK)"
    else
        echo "  ‚ùå $script (erro de sintaxe)"
        ((syntax_errors++))
    fi
done

# Teste 4: Verificar JSONs
echo ""
echo "üìÑ Teste 4: Verificando arquivos JSON..."
json_errors=0
for json in tests/*.json; do
    if python3 -m json.tool "$json" >/dev/null 2>&1; then
        echo "  ‚úÖ $json (JSON v√°lido)"
    else
        echo "  ‚ùå $json (JSON inv√°lido)"
        ((json_errors++))
    fi
done

# Teste 5: Verificar README
echo ""
echo "üìñ Teste 5: Verificando README.md..."
if grep -q "Sistema de Gest√£o de Frota - Mottu API" README.md; then
    echo "  ‚úÖ README.md cont√©m descri√ß√£o da solu√ß√£o"
else
    echo "  ‚ùå README.md n√£o cont√©m descri√ß√£o da solu√ß√£o"
fi

if grep -q "Benef√≠cios para o Neg√≥cio" README.md; then
    echo "  ‚úÖ README.md cont√©m benef√≠cios para o neg√≥cio"
else
    echo "  ‚ùå README.md n√£o cont√©m benef√≠cios para o neg√≥cio"
fi

if grep -q "azure-cli/" README.md; then
    echo "  ‚úÖ README.md cont√©m instru√ß√µes de deploy"
else
    echo "  ‚ùå README.md n√£o cont√©m instru√ß√µes de deploy"
fi

# Teste 6: Verificar script SQL
echo ""
echo "üóÑÔ∏è  Teste 6: Verificando script_bd.sql..."
if grep -q "CREATE TABLE moto" script_bd.sql; then
    echo "  ‚úÖ script_bd.sql cont√©m DDL da tabela moto"
else
    echo "  ‚ùå script_bd.sql n√£o cont√©m DDL da tabela moto"
fi

if grep -q "INSERT INTO moto" script_bd.sql; then
    echo "  ‚úÖ script_bd.sql cont√©m dados de exemplo"
else
    echo "  ‚ùå script_bd.sql n√£o cont√©m dados de exemplo"
fi

# Resumo dos testes
echo ""
echo "üìä RESUMO DOS TESTES"
echo "===================="
echo "Arquivos faltando: $missing_files"
echo "Erros de sintaxe: $syntax_errors"
echo "Erros de JSON: $json_errors"

total_errors=$((missing_files + syntax_errors + json_errors))
if [ $total_errors -eq 0 ]; then
    echo ""
    echo "üéâ TODOS OS TESTES PASSARAM!"
    echo "‚úÖ Projeto pronto para deploy no Azure!"
    echo "‚úÖ Projeto pronto para commit no GitHub!"
else
    echo ""
    echo "‚ö†Ô∏è  $total_errors erro(s) encontrado(s)"
    echo "‚ùå Corrija os erros antes de fazer deploy"
fi

echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "1. Execute: git add ."
echo "2. Execute: git commit -m 'feat: Estrutura completa Sprint 3 DevOps'"
echo "3. Execute: git push origin main"
echo "4. Instale Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
echo "5. Execute os scripts azure-cli/ para deploy"
